parent.0 = simple.params

###	Koza Fitness
pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness

#	We have a GP-specific initializer.  But we'll keep the
#	statistics as a SimpleStatistics (defined in simple.params)
init = ec.gp.GPInitializer

#	We have a single subpopulation containing a GPSpecies,
#	using GPIndividuals as the prototypical individual class.
pop.subpop.0.species = ec.gp.GPSpecies
pop.subpop.0.species.ind = ec.gp.GPIndividual

#	We retry 100 times for duplicates (this is the lil-gp default)
#	in our subpopulation 0
pop.subpop.0.duplicate-retries = 100

#	That GPIndividual has a single tree, which uses the
#	"tc0" Tree Constraints (which we define below later)
pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0

#	The GPSpecies has 3 pipelines, Crossover, Mutation and Reproduction,
#	chosen with 0.85 and 0.05 and 0.1 likelihood respectively.
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
#	Each breed should generate max individuals?
pop.subpop.0.species.pipe.generate-max = false
#	Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 4
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.85
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.07
pop.subpop.0.species.pipe.source.2 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.05
pop.subpop.0.species.pipe.source.3 = ec.gp.breed.MutateOneNodePipeline
pop.subpop.0.species.pipe.source.3.prob = 0.03

###	Reproduction parameters
breed.reproduce.source.0 = ec.select.TournamentSelection
breed.reproduce.must-clone = true

###	Crossover parameters
#	Parents selection method
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
#	Node selector method for parents
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
#	Children may not have a depth which exceeds 15
gp.koza.xover.maxdepth = 10
#	Toss=false -> two child
#	Toss=true -> one child
gp.koza.xover.toss = false
#	Not generate children which exceed 30 nodes in any one tree
#gp.koza.xover.maxsize = 30
#	Tries to crossover parents
gp.koza.xover.tries = 1

###	Subtree Mutation parameters
#	Individual selection method
gp.koza.mutate.source.0 = ec.select.TournamentSelection
#	Node selector method for individual
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
#	Method to build a new sub-tree
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
#	New individual may not have a depth which exceeds 15
gp.koza.mutate.maxdepth = 10
#	Not generate children which exceed 18 nodes in any one tree
#gp.koza.mutate.maxsize = 18
#	Tries to mutate an individual
gp.koza.mutate.tries = 1
#	Tree to try to mutate
gp.koza.mutate.tree.0 = 0
#	GROW is only used for subtree mutation
gp.koza.grow.min-depth = 2
gp.koza.grow.max-depth = 6

###	Mutate One Node parameters
#	Individual selection method
gp.breed.mutate-one-node.source.0 = ec.select.TournamentSelection
#	Node selector method for individual
gp.breed.mutate-one-node.ns.0 = ec.gp.koza.KozaNodeSelector
#	Tree to try to mutate
gp.breed.mutate-one-node.tree.0 = 0
#	Tries to mutate an individual
gp.breed.mutate-one-node.tries = 1


# Default size for TournamentSelection is 4
select.tournament.size = 4

#	We specify a few things about ADFs  -- what kind 
#	of stack they use, and what kind of context
gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext
 
###	KozaNodeSelection parameters
#	The default is 10% terminals, 90% nonterminals when possible,
#	0% "always pick the root", 0% "pick any node"
#	*ns = NodeSelector
gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0

###	Function set parameters 
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
gp.fs.0.name = f0
#fill the rest of this out on a per-problem basis

###	Types definition
gp.type.a.size = 4
gp.type.a.0.name = nil
gp.type.a.1.name = boolean
gp.type.a.2.name = loop
gp.type.a.3.name = term

### Set-types definition
gp.type.s.size = 7
gp.type.s.0.name = nil-or-boolean
gp.type.s.0.size = 2
gp.type.s.0.member.0 = nil
gp.type.s.0.member.1 = boolean
gp.type.s.1.name = nil-or-loop
gp.type.s.1.size = 2
gp.type.s.1.member.0 = nil
gp.type.s.1.member.1 = loop
gp.type.s.2.name = boolean-or-term
gp.type.s.2.size = 2
gp.type.s.2.member.0 = boolean
gp.type.s.2.member.1 = term
gp.type.s.3.name = nil-or-loop-or-term
gp.type.s.3.size = 3
gp.type.s.3.member.0 = nil
gp.type.s.3.member.1 = loop
gp.type.s.3.member.2 = term
gp.type.s.4.name = nil-or-term
gp.type.s.4.size = 2
gp.type.s.4.member.0 = nil
gp.type.s.4.member.1 = term
gp.type.s.5.name = boolean-or-nil-or-loop-or-term
gp.type.s.5.size = 4
gp.type.s.5.member.0 = nil
gp.type.s.5.member.1 = loop
gp.type.s.5.member.2 = term
gp.type.s.5.member.3 = boolean
gp.type.s.6.name = nil-or-loop-or-boolean
gp.type.s.6.size = 3
gp.type.s.6.member.0 = nil
gp.type.s.6.member.1 = loop
gp.type.s.6.member.2 = boolean

### Here we define one GPTreeConstraints object, "tc0",
#	which uses ec.gp.koza.HalfBuilder to create nodes,
#	only allows nodes from the GPFunctionSet "fset",
#	and has 3 tree types.
gp.tc.size = 1
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = nil-or-loop-or-boolean
gp.tc.0.init = ec.gp.koza.HalfBuilder


###	HalfBuilder parameter
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
#	Grow probability
gp.koza.half.growp = 0.5


### GPNodeConstraints

gp.nc.size = 8

#	Terminals
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = term
gp.nc.0.size = 0

#	Not
gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc1
gp.nc.1.returns = boolean
gp.nc.1.size = 1
gp.nc.1.child.0 = boolean-or-term

#	Or, And, Equal
gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc2
gp.nc.2.returns = boolean
gp.nc.2.size = 2
gp.nc.2.child.0 = boolean-or-term
gp.nc.2.child.1 = boolean-or-term

#	IfThen
gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc3
gp.nc.3.returns = nil
gp.nc.3.size = 2
gp.nc.3.child.0 = boolean-or-term
gp.nc.3.child.1 = nil-or-loop-or-term

#	Repeat
gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc4
gp.nc.4.returns = loop
gp.nc.4.size = 1
gp.nc.4.child.0 = nil-or-term

#	Progn2
gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = nc5
gp.nc.5.returns = nil
gp.nc.5.size = 2
gp.nc.5.child.0 = nil-or-loop-or-term
gp.nc.5.child.1 = nil-or-loop-or-term

#	While
gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = nc6
gp.nc.6.returns = loop
gp.nc.6.size = 2
gp.nc.6.child.0 = boolean-or-term
gp.nc.6.child.1 = nil-or-term

#	IfThenElse
gp.nc.7 = ec.gp.GPNodeConstraints
gp.nc.7.name = nc7
gp.nc.7.returns = nil
gp.nc.7.size = 3
gp.nc.7.child.0 = boolean-or-term
gp.nc.7.child.1 = nil-or-loop-or-term
gp.nc.7.child.2 = nil-or-loop-or-term